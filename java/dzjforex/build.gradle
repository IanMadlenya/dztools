apply plugin: 'java'
apply plugin: 'maven-publish'

group= 'com.jforex.dzplugin'
version = '0.9.5'
sourceCompatibility = 1.8
targetCompatibility = 1.8


description ="""
The Java plugin part for Zorro which lets you trade with Dukascopy
Project name: ${project.name}
"""

def deployFolder = "${buildDir}/deploy"

repositories {
   mavenLocal()
   mavenCentral()
   maven {
       url "https://www.dukascopy.com/client/jforexlib/publicrepo"
   }
}

dependencies {
    compile 'com.dukascopy.dds2:DDS2-jClient-JForex:3.1.2'
    compile 'com.jforex.programming:JForexUtils:0.9.8'
    compile 'org.aeonbits.owner:owner:1.0.9'
    compile 'commons-net:commons-net:3.3'
    
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:java-hamcrest:2.0.0.0'
    testCompile 'org.mockito:mockito-core:2.7.2'
    testCompile 'de.bechte.junit:junit-hierarchicalcontextrunner:4.12.1'
}

gradle.projectsEvaluated {
   tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': project.name,  
                   'Implementation-Version': version,
                   'Class-Path' : ". ${(configurations.runtime.collect { "lib/$it.name" }).join(' ') }"
    }
    baseName = project.name
}

task copyJarToPluginFolder(type: Copy) {
    from jar
    into "${zorroPath}/Plugin/dukascopy"
}

task startZorro(type: Exec, dependsOn: ':jar') {
    workingDir "${zorroPath}"
    commandLine 'cmd', '/c', 'zorro.bat'
}

task copyDepsToPluginLibFolder(type: Copy) {
    from configurations.runtime
    into "${zorroPath}/Plugin/dukascopy/lib"
}

task createDeployFolder(dependsOn: ':jar') {
    delete deployFolder
    mkdir deployFolder
    
    def strategyFolder = "${deployFolder}/Strategy"
    mkdir strategyFolder
    
    def resourceFolder = "src/main/resources"
    copy{
        from "src/main/resources/DukascopyDownload.c"
        into strategyFolder
    }
    
    def pluginFolder = "${deployFolder}/Plugin"
    mkdir pluginFolder
    
    copy{
        from "../../c++/Release/dukascopy.dll"
        into pluginFolder
    }
    
    def dukascopyFolder = "${pluginFolder}/dukascopy"
    mkdir dukascopyFolder
    
    copy{
        from jar
        into dukascopyFolder
    }
    
    copy{
        from "src/main/resources/log4j2.xml"
        into dukascopyFolder
    }
    
    copy{
        from "src/main/resources/log4j.properties"
        into dukascopyFolder
    }
    
    copy{
        from "src/main/resources/Plugin.properties"
        into dukascopyFolder
    }
    
    def libFolder = "${dukascopyFolder}/lib"
    mkdir libFolder
    
    copy{
        from configurations.runtime
        into libFolder
    }
}

task dzDeploy(type: Zip, dependsOn: ':createDeployFolder') {
    baseName = project.name
    from deployFolder
}
